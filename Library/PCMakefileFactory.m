/* 
 * PCMakefileFactory.m created by probert on 2002-02-28 22:16:25 +0000
 *
 * Project ProjectCenter
 *
 * Created with ProjectCenter - http://www.gnustep.org
 */

#include "PCDefines.h"
#include "PCProject.h"
#include "PCMakefileFactory.h"

#define COMMENT_HEADERS     @"\n\n#\n# Header files\n#\n"
#define COMMENT_RESOURCES   @"\n\n#\n# Resource files\n#\n"
#define COMMENT_CLASSES     @"\n\n#\n# Class files\n#\n"
#define COMMENT_CFILES      @"\n\n#\n# C files\n#\n"
#define COMMENT_SUBPROJECTS @"\n\n#\n# Subprojects\n#\n"
#define COMMENT_APP         @"\n\n#\n# Main application\n#\n"
#define COMMENT_LIBRARIES   @"\n\n#\n# Additional libraries\n#\n"
#define COMMENT_BUNDLE      @"\n\n#\n# Bundle\n#\n"
#define COMMENT_LIBRARY     @"\n\n#\n# Library\n#\n"
#define COMMENT_TOOL        @"\n\n#\n# Tool\n#\n"

@implementation PCMakefileFactory

static PCMakefileFactory *_factory = nil;

+ (PCMakefileFactory *)sharedFactory
{
  static BOOL isInitialised = NO;

  if( isInitialised == NO )
    {
      _factory = [[PCMakefileFactory alloc] init];

      isInitialised = YES;
    }

  return _factory;
}

- (void)createMakefileForProject:(NSString *)prName
{
  NSAssert( prName, @"No project name given!");

  AUTORELEASE( mfile );
  mfile = [[NSMutableString alloc] init];

  AUTORELEASE( pnme );
  pnme = [prName copy];

  [mfile appendString:@"#\n"];
  [mfile appendString:@"# GNUmakefile - Generated by ProjectCenter\n"];
  [mfile appendString:@"#\n"];
  
  [mfile appendString:@"\ninclude $(GNUSTEP_MAKEFILES)/common.make\n"];
}

- (BOOL)createPreambleForProject:(PCProject *)project
{
  NSMutableString *mfp = [[NSMutableString alloc] init];
  NSString        *mfl = nil;
  NSArray         *array = nil;
  NSDictionary    *projectDict = [project projectDict];
  NSString        *projectPath = [project projectPath];

  // Create the new file
  [mfp appendString:@"#\n"];
  [mfp appendString:@"# GNUmakefile.preamble - Generated by ProjectCenter\n"];
  [mfp appendString:@"#\n\n"];

  // Preprocessor flags
  [mfp appendString:@"# Additional flags to pass to the preprocessor\n"];
  [mfp appendString:
    [NSString stringWithFormat:@"ADDITIONAL_CPPFLAGS += %@\n\n", 
     [projectDict objectForKey:PCPreprocessorOptions]]];

  // Objective C compiler flags
  [mfp appendString:@"# Additional flags to pass to Objective C compiler\n"];
  [mfp appendString:
    [NSString stringWithFormat:@"ADDITIONAL_OBJCFLAGS += %@\n\n",
     [projectDict objectForKey:PCObjCCompilerOptions]]];
    
  // C compiler flags
  [mfp appendString:@"# Additional flags to pass to C compiler\n"];
  [mfp appendString:
    [NSString stringWithFormat:@"ADDITIONAL_CFLAGS += %@\n\n",
     [projectDict objectForKey:PCCompilerOptions]]];
		     
  // Linker flags
  [mfp appendString:@"# Additional flags to pass to the linker\n"];
  [mfp appendString:
    [NSString stringWithFormat:@"ADDITIONAL_LDFLAGS += %@ ",
     [projectDict objectForKey:PCLinkerOptions]]];
  array = [projectDict objectForKey:PCLibraries];
  if (array && [array count])
    {
      NSString     *tmp;
      NSEnumerator *enumerator = [array objectEnumerator];
      
      while ((tmp = [enumerator nextObject]))
        {
          if (![tmp isEqualToString:@"gnustep-base"] &&
              ![tmp isEqualToString:@"gnustep-gui"])
            {
              [mfp appendString:[NSString stringWithFormat:@"-l%@ ",tmp]];
            }
        }
    }
  [mfp appendString:@"\n\n"];

  // Directories where to search headers
  [mfp appendString:
    @"# Additional include directories the compiler should search\n"];
  [mfp appendString:@"ADDITIONAL_INCLUDE_DIRS += "];
  array = [projectDict objectForKey:PCSearchHeaders];
  if (array && [array count])
    {
      NSString     *tmp;
      NSEnumerator *enumerator = [array objectEnumerator];

      while ((tmp = [enumerator nextObject])) 
	{
	  [mfp appendString:[NSString stringWithFormat:@"-I%@ ",tmp]];
	}
    }
  [mfp appendString:@"\n\n"];
  
  // Directories where to search libraries
  [mfp appendString:
    @"# Additional library directories the linker should search\n"];
  [mfp appendString:@"ADDITIONAL_LIB_DIRS += "];
  array = [projectDict objectForKey:PCSearchLibs];
  if (array && [array count])
    {
      NSString     *tmp;
      NSEnumerator *enumerator = [array objectEnumerator];

      while ((tmp = [enumerator nextObject])) 
	{
	  [mfp appendString:[NSString stringWithFormat:@"-L%@ ",tmp]];
	}
    }
  [mfp appendString:@"\n\n"];

//  [mfp appendString:[projectDict objectForKey:PCLibraries]];

  // Write the new file to disc!
  mfl = [projectPath stringByAppendingPathComponent:@"GNUmakefile.preamble"];
  if ([mfp writeToFile:mfl atomically:YES]) 
    {
      return YES;
    }

  return NO;
}

- (BOOL)createPostambleForProject:(PCProject *)project
{
  NSBundle      *bundle = nil;
  NSString      *template = nil;
  NSString      *postamble = nil;
  NSFileManager *fm = [NSFileManager defaultManager];
  
  bundle = [NSBundle bundleForClass:[self class]];
  template = [bundle pathForResource:@"postamble" ofType:@"template"];
  postamble = [[project projectPath] 
    stringByAppendingPathComponent:@"GNUmakefile.postamble"];

  return [fm copyPath:template toPath:postamble handler:nil];
}

- (void)appendString:(NSString *)aString
{
  NSAssert( mfile, @"No valid makefile available!");
  NSAssert( aString, @"No valid string!");

  [mfile appendString:aString];
}

- (void)appendHeaders:(NSArray *)array
{
  [self appendHeaders: array forTarget: pnme];
}

- (void)appendHeaders:(NSArray *)array forTarget: (NSString *)target
{
  [self appendString:COMMENT_HEADERS];
  [self appendString:[NSString stringWithFormat:@"%@_HEADER_FILES = ", 
                      target]];

  if( array && [array count] )
    {
      NSString     *tmp;
      NSEnumerator *enumerator = [array objectEnumerator];

      while ( (tmp = [enumerator nextObject]) ) 
	{
	  [self appendString:[NSString stringWithFormat:@"\\\n%@ ",tmp]];
	}
    }
}

- (void)appendClasses:(NSArray *)array
{
  [self appendClasses: array forTarget: pnme];
}

- (void)appendClasses:(NSArray *)array forTarget: (NSString *)target
{
  [self appendString:COMMENT_CLASSES];
  [self appendString:[NSString stringWithFormat:@"%@_OBJC_FILES = ", target]];

  if( array && [array count] )
    {
      NSString     *tmp;
      NSEnumerator *enumerator = [array objectEnumerator];

      while ( (tmp = [enumerator nextObject] )) 
	{
	  [self appendString:[NSString stringWithFormat:@"\\\n%@ ",tmp]];
	}
    }
}

- (void)appendOtherSources:(NSArray *)array
{
  [self appendOtherSources: array forTarget: pnme];
}

- (void)appendOtherSources:(NSArray *)array forTarget: (NSString *)target
{
  NSMutableArray *marray = nil;
  NSEnumerator *oenum;
  NSString *file;
  
  [self appendString:COMMENT_CFILES];
  [self appendString:[NSString stringWithFormat:@"%@_C_FILES = ", target]];
  if ( array == nil || [array count] == 0)
    return;
  
  /* Other Sources can have both m files and c files (possibly others?).  */
  oenum = [array objectEnumerator];
  while ((file = [oenum nextObject]))
    {
      if ([file hasSuffix: @".m"])
	{
	  if (marray == nil)
	    marray = [NSMutableArray arrayWithCapacity: 2];
	  [marray addObject: file];
	}
      else /* if ([f hasSuffix: @".c"]) */
	{
	  [self appendString:[NSString stringWithFormat:@"\\\n%@ ",file]];
	}
    }

  [self appendString: @"\n"];
  [self appendString:[NSString stringWithFormat:@"%@_OBJC_FILES += ",pnme]];
  if ( marray )
    {
      NSString     *file;
      NSEnumerator *enumerator = [marray objectEnumerator];
	
      while ( (file = [enumerator nextObject]) ) 
	{
	  [self appendString:[NSString stringWithFormat:@"\\\n%@ ", file]];
	}
    }
}

- (void)appendResources
{
  [self appendString:COMMENT_RESOURCES];
  [self appendString:[NSString stringWithFormat:@"%@_RESOURCE_FILES = ",pnme]];
}

- (void)appendResourceItems:(NSArray *)array
{
  NSString     *tmp;
  NSEnumerator *enumerator = [array objectEnumerator];

  while ((tmp = [enumerator nextObject]))
    {
      [self appendString:[NSString stringWithFormat:@"\\\n%@ ",tmp]];
    }
}

- (void)appendSubprojects:(NSArray*)array
{
  [self appendString:COMMENT_SUBPROJECTS];

  if (array && [array count]) 
    {
      NSString     *tmp;
      NSEnumerator *enumerator = [array objectEnumerator];

      while ((tmp = [enumerator nextObject]))
	{
	  [self appendString:[NSString stringWithFormat:@"\\\n\t%@ ",tmp]];
	}
    }
}

- (NSData *)encodedMakefile
{
  NSAssert( mfile, @"No valid makefile available!");

  return [mfile dataUsingEncoding:[NSString defaultCStringEncoding]];
}

// Should be removed
- (void)appendTailForTool
{
  [self appendString:@"\n\n"];

  [self appendString:@"-include GNUmakefile.preamble\n"];
  [self appendString:@"-include GNUmakefile.local\n"];
  [self appendString:@"include $(GNUSTEP_MAKEFILES)/aggregate.make\n"];
  [self appendString:@"include $(GNUSTEP_MAKEFILES)/tool.make\n"];
  [self appendString:@"-include GNUmakefile.postamble\n"];
}

@end

@implementation PCMakefileFactory (ToolProject)

- (void)appendTool
{
  [self appendString:COMMENT_TOOL];

  [self appendString:[NSString stringWithFormat:@"PACKAGE_NAME=%@\n",pnme]];
  [self appendString:[NSString stringWithFormat:@"TOOL_NAME=%@\n",pnme]];
}

- (void)appendToolIcon:(NSString*)icn
{
  [self appendString:
    [NSString stringWithFormat:@"%@_TOOL_ICON=%@\n",pnme, icn]];
}

- (void)appendToolLibraries:(NSArray*)array
{
  [self appendString:COMMENT_LIBRARIES];

  [self appendString:[NSString stringWithFormat:@"%@_TOOL_LIBS += ",pnme]];

  if( array && [array count] )
    {
      NSString     *tmp;
      NSEnumerator *enumerator = [array objectEnumerator];

      while ((tmp = [enumerator nextObject]) )
	{
	  if (![tmp isEqualToString:@"gnustep-base"])
	    {
	      [self appendString:[NSString stringWithFormat:@"-l%@ ",tmp]];
	    }
	}
    }
}

@end

